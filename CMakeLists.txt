# PCANNON CMAKELISTS.TXT v1.1S - FROM PCANNON PROJECT STANDARDS
# STANDARD: 20250608
# https://github.com/pcannon09/pcannonProjectStandards

cmake_minimum_required(VERSION 3.24)

# Link exec if only changed
cmake_policy(SET CMP0147 NEW)

# Build mode configuration
option(DEV_MODE "Enable development mode" ON)
set(BUILD_MODE "Development" CACHE STRING "Build mode")

if(NOT DEV_MODE)
	set(DEV_MODE   ON)
    set(BUILD_MODE "Developement")
endif()

if(DEV_MODE)
    set(BUILD_MODE "Development" CACHE STRING "Build mode")
else()
    set(BUILD_MODE "Production" CACHE STRING "Build mode")
endif()

# Read metadata
file(READ ".private/project.json" projectInfo)
string(JSON projectName GET "${projectInfo}" exeName)
string(JSON projectVersion GET "${projectInfo}" version)
string(JSON projectVersionState GET "${projectInfo}" versionState)
string(JSON projectVersionSTD GET "${projectInfo}" versionSTD)

# Version configuration
set(VERSION "${projectVersion}")
set(VERSION_STATE "${projectVersionState}")
set(VERSION_STD "${projectVersionSTD}")

project(${projectName} VERSION ${projectVersion})

# Build Configuration

# Development mode flags
set(DEV_COMPILE_FLAGS
    -fsanitize=address,leak
    -g
    -Wunused
    -Wall
    -Wno-range-loop-analysis
    -DASIN_DEV=true
)

set(DEV_LINK_FLAGS
    -fsanitize=address,leak
    -g
)

# Production mode flags
set(PROD_COMPILE_FLAGS
    -O3
    -DNDEBUG
    -DASIN_DEV=false
)

set(PROD_LINK_FLAGS
    -O3
)

# Apply flags based on mode
if(DEV_MODE)
    set(PROGRAM_COMPILE_FLAGS ${DEV_COMPILE_FLAGS})
    set(PROGRAM_LINK_FLAGS ${DEV_LINK_FLAGS})
else()
    set(PROGRAM_COMPILE_FLAGS ${PROD_COMPILE_FLAGS})
    set(PROGRAM_LINK_FLAGS ${PROD_LINK_FLAGS})
endif()

# Project Configuration

set(CPP_STD 20)
set(CMAKE_CXX_STANDARD ${CPP_STD})
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

set(CMAKE_AUTOGEN_VERBOSE ON)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_COLOR_DIAGNOSTICS ON)

# Directory Setup

set(SRC_DIR "${CMAKE_SOURCE_DIR}/src")
set(TESTS_DIR "${CMAKE_SOURCE_DIR}/tests")
set(INC_DIR "${CMAKE_SOURCE_DIR}/inc/${projectName}")
set(VENDOR_DIR "${CMAKE_SOURCE_DIR}/vendor")

# Source Files

set(HEADERS
    ${INC_DIR}/ASITpredefines.hpp

    ${INC_DIR}/PTREEColor.hpp
    ${INC_DIR}/PTREE.hpp
)

set(SOURCES
    ${SRC_DIR}/main.cpp

    ${SRC_DIR}/PTREEColor.cpp
    ${SRC_DIR}/PTREE.cpp

    ${TESTS_DIR}/tests.cpp
)

# Build Target

add_executable(${projectName} ${SOURCES})

# Apply compile and link options
target_compile_options(${projectName} PRIVATE ${PROGRAM_COMPILE_FLAGS})
target_link_options(${projectName} PRIVATE ${PROGRAM_LINK_FLAGS})

add_subdirectory(${VENDOR_DIR}/argx argx)

# Link libraries
target_link_libraries(${projectName} PRIVATE 
	argx_static
)

# Additional sources
target_sources(${projectName} PRIVATE 
)

# Include directories
target_include_directories(${projectName} PRIVATE
    ${INC_DIR}
)

# Output directory
set_target_properties(${projectName} PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin
)

# # Installation Configuration
#
# # Install executable
# install(TARGETS ${projectName}
#     RUNTIME DESTINATION bin
#     COMPONENT Runtime
# )
#
# # Install headers (if building a library)
# install(FILES ${HEADERS}
#     DESTINATION include/${projectName}
#     COMPONENT Development
# )
#
# # Install configuration files
# install(FILES 
#     README.md
#     DESTINATION share/doc/${projectName}
#     COMPONENT Documentation
#     OPTIONAL
# )
#
# # Create uninstall target
# configure_file(
#     "${CMAKE_CURRENT_SOURCE_DIR}/cmake_uninstall.cmake.in"
#     "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
#     IMMEDIATE @ONLY
#     OPTIONAL
# )
#
# add_custom_target(uninstall
#     COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake
# )

# Package Configuration

set(CPACK_PACKAGE_NAME ${projectName})
set(CPACK_PACKAGE_VERSION ${VERSION})
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Generated by PCannon Project Standards")
set(CPACK_PACKAGE_VENDOR "PCannon")
set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE")
set(CPACK_RESOURCE_FILE_README "${CMAKE_CURRENT_SOURCE_DIR}/README.md")

include(CPack)

# Build Information

message(STATUS "Project: ${projectName}")
message(STATUS "Version: ${VERSION}-${VERSION_STATE}")
message(STATUS "Standard: ${VERSION_STD}")
message(STATUS "Build Mode: ${BUILD_MODE}")
message(STATUS "CXX Compiler: ${CMAKE_CXX_COMPILER}")
message(STATUS "CXX Standard: C++${CPP_STD}")
# message(STATUS "Install Prefix: ${CMAKE_INSTALL_PREFIX}")

# Usage Instructions

message(STATUS "Usage:")
message(STATUS "  Development build: cmake -DDEV_MODE=ON ..")
message(STATUS "  Production build:  cmake -DDEV_MODE=OFF ..")
# message(STATUS "  Install:           $\{COMMAND} install")
message(STATUS "  Uninstall:         $\{COMMAND} uninstall")
message(STATUS "  Package:           $\{COMMAND} package")

